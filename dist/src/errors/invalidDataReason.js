"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidDataReason = void 0;
var InvalidDataReason;
(function (InvalidDataReason) {
    InvalidDataReason["GET_EXT_PUB_KEY_PATHS_NOT_ARRAY"] = "ext pub key paths not an array";
    InvalidDataReason["INVALID_PATH"] = "invalid path";
    InvalidDataReason["NETWORK_INVALID_PROTOCOL_MAGIC"] = "invalid protocol magic";
    InvalidDataReason["NETWORK_INVALID_NETWORK_ID"] = "invalid network id";
    InvalidDataReason["INPUTS_NOT_ARRAY"] = "inputs not an array";
    InvalidDataReason["INPUT_INVALID_TX_HASH"] = "invalid tx hash in an input";
    InvalidDataReason["INPUT_INVALID_PATH"] = "invalid input path";
    InvalidDataReason["INPUT_INVALID_UTXO_INDEX"] = "invalid input utxo index";
    InvalidDataReason["OUTPUTS_NOT_ARRAY"] = "outputs not an array";
    InvalidDataReason["OUTPUT_INVALID_AMOUNT"] = "invalid amount in an output";
    InvalidDataReason["OUTPUT_INVALID_POLICY_NAME"] = "invalid policy id in the token bundle in an output ";
    InvalidDataReason["OUTPUT_INVALID_TOKEN_BUNDLE_NOT_ARRAY"] = "invalid token bundle in an output - asset groups not an array";
    InvalidDataReason["OUTPUT_INVALID_TOKEN_BUNDLE_TOO_LARGE"] = "invalid token bundle in an output - too many asset groups";
    InvalidDataReason["OUTPUT_INVALID_TOKEN_BUNDLE_ORDERING"] = "invalid token bundle in an output - incorrect ordering of asset groups";
    InvalidDataReason["OUTPUT_INVALID_TOKEN_BUNDLE_NOT_UNIQUE"] = "invalid token bundle in an output - policyIds not unique";
    InvalidDataReason["OUTPUT_INVALID_ASSET_NAME"] = "invalid asset name in the token bundle in an output";
    InvalidDataReason["OUTPUT_INVALID_ASSET_GROUP_NOT_ARRAY"] = "invalid asset group in the token bundle in an output - tokens not an array";
    InvalidDataReason["OUTPUT_INVALID_ASSET_GROUP_TOO_LARGE"] = "invalid asset group in the token bundle in an output - too many tokens";
    InvalidDataReason["OUTPUT_INVALID_ASSET_GROUP_ORDERING"] = "invalid asset group in the token bundle in an output - incorrect ordering of tokens";
    InvalidDataReason["OUTPUT_INVALID_ASSET_GROUP_NOT_UNIQUE"] = "invalid asset group in the token bundle in an output - token names not unique";
    InvalidDataReason["OUTPUT_INVALID_ADDRESS"] = "invalid address in an output";
    InvalidDataReason["ADDRESS_UNKNOWN_TYPE"] = "unknown address type";
    InvalidDataReason["ADDRESS_INVALID_SPENDING_PATH"] = "invalid address spending path";
    InvalidDataReason["ADDRESS_INVALID_BLOCKCHAIN_POINTER"] = "invalid address blockchain pointer";
    InvalidDataReason["ADDRESS_INVALID_STAKING_KEY_PATH"] = "invalid address staking key path";
    InvalidDataReason["ADDRESS_INVALID_STAKING_KEY_HASH"] = "invalid address staking key hash";
    InvalidDataReason["ADDRESS_INVALID_STAKING_INFO"] = "Invalid staking info in an output";
    InvalidDataReason["FEE_INVALID"] = "invalid fee";
    InvalidDataReason["TTL_INVALID"] = "invalid ttl";
    InvalidDataReason["CERTIFICATES_NOT_ARRAY"] = "certificates not an array";
    InvalidDataReason["CERTIFICATE_INVALID_PATH"] = "one of the certificates contains an invalid path";
    InvalidDataReason["CERTIFICATE_INVALID_POOL_KEY_HASH"] = "one of the certificates contains an invalid pool key hash";
    InvalidDataReason["CERTIFICATE_SUPERFLUOUS_POOL_KEY_HASH"] = "superfluous pool key hash in a certificate";
    InvalidDataReason["CERTIFICATE_INVALID_TYPE"] = "invalid certificate type";
    InvalidDataReason["POOL_REGISTRATION_INVALID_VRF_KEY_HASH"] = "invalid vrf key hash in a pool registration certificate";
    InvalidDataReason["POOL_REGISTRATION_INVALID_PLEDGE"] = "invalid pledge in a pool registration certificate";
    InvalidDataReason["POOL_REGISTRATION_INVALID_COST"] = "invalid cost in a pool registration certificate";
    InvalidDataReason["POOL_REGISTRATION_INVALID_MARGIN"] = "invalid margin in a pool registration certificate";
    InvalidDataReason["POOL_REGISTRATION_INVALID_MARGIN_DENOMINATOR"] = "pool margin denominator must be a value between 1 and 10^15";
    InvalidDataReason["POOL_REGISTRATION_OWNERS_TOO_MANY"] = "too many owners in a pool registration certificate";
    InvalidDataReason["POOL_KEY_INVALID_TYPE"] = "invalid pool key type";
    InvalidDataReason["POOL_KEY_INVALID_PATH"] = "invalid pool key path in a pool registration certificate";
    InvalidDataReason["POOL_KEY_INVALID_KEY_HASH"] = "invalid pool key hash in a pool registration certificate";
    InvalidDataReason["POOL_OWNER_INVALID_TYPE"] = "invalid owner type";
    InvalidDataReason["POOL_OWNER_INVALID_PATH"] = "invalid owner path in a pool registration certificate";
    InvalidDataReason["POOL_OWNER_INVALID_KEY_HASH"] = "invalid owner key hash in a pool registration certificate";
    InvalidDataReason["POOL_REGISTRATION_RELAYS_TOO_MANY"] = "too many pool relays in a pool registration certificate";
    InvalidDataReason["POOL_REWARD_ACCOUNT_INVALID_TYPE"] = "invalid pool reward account type";
    InvalidDataReason["POOL_REWARD_ACCOUNT_INVALID_PATH"] = "invalid pool reward account key path in a pool registration certificate";
    InvalidDataReason["POOL_REWARD_ACCOUNT_INVALID_HEX"] = "invalid pool reward account hex in a pool registration certificate";
    InvalidDataReason["POOL_RETIREMENT_INVALID_RETIREMENT_EPOCH"] = "invalid pool retirement epoch";
    InvalidDataReason["RELAY_INVALID_TYPE"] = "invalid type of a relay in a pool registration certificate";
    InvalidDataReason["RELAY_INVALID_PORT"] = "invalid port in a relay in a pool registration certificate";
    InvalidDataReason["RELAY_INVALID_IPV4"] = "invalid ipv4 in a relay in a pool registration certificate";
    InvalidDataReason["RELAY_INVALID_IPV6"] = "invalid ipv6 in a relay in a pool registration certificate";
    InvalidDataReason["RELAY_INVALID_DNS"] = "invalid dns record in a relay in a pool registration certificate";
    InvalidDataReason["POOL_REGISTRATION_METADATA_INVALID_URL"] = "invalid metadata in a pool registration certificate= invalid url";
    InvalidDataReason["POOL_REGISTRATION_METADATA_INVALID_HASH"] = "invalid metadata in a pool registration certificate= invalid hash";
    InvalidDataReason["WITHDRAWALS_NOT_ARRAY"] = "withdrawals not an array";
    InvalidDataReason["WITHDRAWAL_INVALID_AMOUNT"] = "invalid withdrawal amount";
    InvalidDataReason["WITHDRAWAL_INVALID_PATH"] = "invalid withdrawal path";
    InvalidDataReason["AUXILIARY_DATA_UNKNOWN_TYPE"] = "unknown auxiliary data type";
    InvalidDataReason["AUXILIARY_DATA_INVALID_HASH"] = "invalid auxiliary data hash";
    InvalidDataReason["METADATA_UNKNOWN_TYPE"] = "unknown metadata type";
    InvalidDataReason["CATALYST_REGISTRATION_INVALID_VOTING_KEY"] = "invalid Catalyst registration voting key";
    InvalidDataReason["CATALYST_REGISTRATION_INVALID_STAKING_KEY_PATH"] = "invalid Catalyst registration staking key path";
    InvalidDataReason["CATALYST_REGISTRATION_INVALID_REWARDS_DESTINATION_BYRON"] = "Catalyst registration rewards destination cannot be a Byron-era address";
    InvalidDataReason["CATALYST_REGISTRATION_INVALID_NONCE"] = "invalid Catalyst registration nonce";
    InvalidDataReason["VALIDITY_INTERVAL_START_INVALID"] = "invalid validity interval start";
    InvalidDataReason["SIGN_MODE_UNKNOWN"] = "unknown signing mode";
    InvalidDataReason["SIGN_MODE_ORDINARY__POOL_REGISTRATION_NOT_ALLOWED"] = "pool registration is not allowed in TransactionSigningMode.ORDINARY_TRANSACTION";
    InvalidDataReason["SIGN_MODE_POOL_OWNER__DEVICE_OWNED_ADDRESS_NOT_ALLOWED"] = "outputs given by path are not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OWNER";
    InvalidDataReason["SIGN_MODE_POOL_OWNER__INPUT_WITH_PATH_NOT_ALLOWED"] = "inputs with path are not allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OWNER";
    InvalidDataReason["SIGN_MODE_POOL_OWNER__SINGLE_POOL_REG_CERTIFICATE_REQUIRED"] = "single pool registration certificate is expected in TransactionSigningMode.POOL_REGISTRATION_AS_OWNER";
    InvalidDataReason["SIGN_MODE_POOL_OWNER__SINGLE_DEVICE_OWNER_REQUIRED"] = "single device-owned pool owner is expected in TransactionSigningMode.POOL_REGISTRATION_AS_OWNER";
    InvalidDataReason["SIGN_MODE_POOL_OWNER__WITHDRAWALS_NOT_ALLOWED"] = "no withdrawals allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OWNER";
    InvalidDataReason["SIGN_MODE_POOL_OPERATOR__SINGLE_POOL_REG_CERTIFICATE_REQUIRED"] = "single pool registration certificate is expected in TransactionSigningMode.POOL_REGISTRATION_AS_OPERATOR";
    InvalidDataReason["SIGN_MODE_POOL_OPERATOR__DEVICE_OWNED_POOL_KEY_REQUIRED"] = "device owned pool key is required in TransactionSigningMode.POOL_REGISTRATION_AS_OPERATOR";
    InvalidDataReason["SIGN_MODE_POOL_OPERATOR__DEVICE_OWNED_POOL_OWNER_NOT_ALLOWED"] = "no device-owned pool owner is expected in TransactionSigningMode.POOL_REGISTRATION_AS_OPERATOR";
    InvalidDataReason["SIGN_MODE_POOL_OPERATOR__WITHDRAWALS_NOT_ALLOWED"] = "no withdrawals allowed in TransactionSigningMode.POOL_REGISTRATION_AS_OPERATOR";
    InvalidDataReason["OPERATIONAL_CERTIFICATE_INVALID_KES_KEY"] = "invalid operational certificate kes key";
    InvalidDataReason["OPERATIONAL_CERTIFICATE_INVALID_KES_PERIOD"] = "invalid operational certificate kes period";
    InvalidDataReason["OPERATIONAL_CERTIFICATE_INVALID_ISSUE_COUNTER"] = "invalid operational certificate issue counter";
    InvalidDataReason["OPERATIONAL_CERTIFICATE_INVALID_COLD_KEY_PATH"] = "invalid operational certificate cold key path";
})(InvalidDataReason = exports.InvalidDataReason || (exports.InvalidDataReason = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW52YWxpZERhdGFSZWFzb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZXJyb3JzL2ludmFsaWREYXRhUmVhc29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUlBLElBQVksaUJBMEpYO0FBMUpELFdBQVksaUJBQWlCO0lBRTNCLHVGQUFrRSxDQUFBO0lBQ2xFLGtEQUE2QixDQUFBO0lBRTdCLDhFQUF5RCxDQUFBO0lBQ3pELHNFQUFpRCxDQUFBO0lBRWpELDZEQUF3QyxDQUFBO0lBRXhDLDBFQUFxRCxDQUFBO0lBQ3JELDhEQUF5QyxDQUFBO0lBQ3pDLDBFQUFxRCxDQUFBO0lBRXJELCtEQUEwQyxDQUFBO0lBRTFDLDBFQUFxRCxDQUFBO0lBQ3JELHVHQUFrRixDQUFBO0lBQ2xGLDRIQUF1RyxDQUFBO0lBQ3ZHLHdIQUFtRyxDQUFBO0lBQ25HLG9JQUErRyxDQUFBO0lBQy9HLHdIQUFtRyxDQUFBO0lBQ25HLHNHQUFpRixDQUFBO0lBQ2pGLHdJQUFtSCxDQUFBO0lBQ25ILG9JQUErRyxDQUFBO0lBQy9HLGdKQUEySCxDQUFBO0lBQzNILDRJQUF1SCxDQUFBO0lBRXZILDRFQUF1RCxDQUFBO0lBRXZELGtFQUE2QyxDQUFBO0lBQzdDLG9GQUErRCxDQUFBO0lBQy9ELDhGQUF5RSxDQUFBO0lBQ3pFLDBGQUFxRSxDQUFBO0lBQ3JFLDBGQUFxRSxDQUFBO0lBQ3JFLHVGQUFrRSxDQUFBO0lBRWxFLGdEQUEyQixDQUFBO0lBRTNCLGdEQUEyQixDQUFBO0lBRTNCLHlFQUFvRCxDQUFBO0lBRXBELGtHQUE2RSxDQUFBO0lBQzdFLG9IQUErRixDQUFBO0lBQy9GLHlHQUM0QyxDQUFBO0lBQzVDLDBFQUFxRCxDQUFBO0lBRXJELHVIQUN5RCxDQUFBO0lBQ3pELDJHQUNtRCxDQUFBO0lBQ25ELHVHQUNpRCxDQUFBO0lBQ2pELDJHQUNtRCxDQUFBO0lBQ25ELGlJQUM2RCxDQUFBO0lBQzdELDZHQUNvRCxDQUFBO0lBRXBELG9FQUN1QixDQUFBO0lBQ3ZCLHVHQUMwRCxDQUFBO0lBQzFELDJHQUMwRCxDQUFBO0lBRTFELG1FQUNvQixDQUFBO0lBQ3BCLHNHQUN1RCxDQUFBO0lBQ3ZELDhHQUMyRCxDQUFBO0lBQzNELGtIQUN5RCxDQUFBO0lBRXpELDBGQUNrQyxDQUFBO0lBQ2xDLGlJQUN5RSxDQUFBO0lBQ3pFLDJIQUNvRSxDQUFBO0lBRXBFLCtGQUMrQixDQUFBO0lBRS9CLHNHQUM0RCxDQUFBO0lBQzVELHNHQUM0RCxDQUFBO0lBQzVELHNHQUM0RCxDQUFBO0lBQzVELHNHQUM0RCxDQUFBO0lBQzVELDJHQUNrRSxDQUFBO0lBRWxFLGdJQUNrRSxDQUFBO0lBQ2xFLGtJQUNtRSxDQUFBO0lBRW5FLHVFQUFrRCxDQUFBO0lBRWxELDRFQUF1RCxDQUFBO0lBQ3ZELHdFQUFtRCxDQUFBO0lBRW5ELGdGQUEyRCxDQUFBO0lBQzNELGdGQUEyRCxDQUFBO0lBRTNELG9FQUErQyxDQUFBO0lBRS9DLDBHQUFxRixDQUFBO0lBQ3JGLHNIQUFpRyxDQUFBO0lBQ2pHLHdKQUFtSSxDQUFBO0lBQ25JLGdHQUEyRSxDQUFBO0lBRTNFLHdGQUFtRSxDQUFBO0lBRW5FLCtEQUEwQyxDQUFBO0lBRTFDLDBKQUNpRixDQUFBO0lBRWpGLDBLQUM0RixDQUFBO0lBQzVGLGdLQUN1RixDQUFBO0lBQ3ZGLHlMQUN1RyxDQUFBO0lBQ3ZHLDJLQUNpRyxDQUFBO0lBQ2pHLGtKQUM2RSxDQUFBO0lBRTdFLCtMQUMwRyxDQUFBO0lBQzFHLDBLQUMyRixDQUFBO0lBQzNGLG9MQUNnRyxDQUFBO0lBQ2hHLHdKQUNnRixDQUFBO0lBRWhGLHdHQUN5QyxDQUFBO0lBQ3pDLDhHQUM0QyxDQUFBO0lBQzVDLG9IQUMrQyxDQUFBO0lBQy9DLG9IQUMrQyxDQUFBO0FBQ2pELENBQUMsRUExSlcsaUJBQWlCLEdBQWpCLHlCQUFpQixLQUFqQix5QkFBaUIsUUEwSjVCIn0=